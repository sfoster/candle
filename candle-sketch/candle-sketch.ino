/*
  Sampled LED candle
*/
#define DEBUG 1
#include <avr/pgmspace.h>

#ifdef DEBUG
#include <SoftwareSerial.h>

const int rxPin = 3; // physical pin 2 on attiny852
const int txPin = 4; // physical pin 3
#endif

#ifdef DEBUG
SoftwareSerial mySerial(rxPin, txPin); // RX, TX
#endif

int rowIndex = 0;  // index into data rows
const PROGMEM  byte dataRows[] = {253, 253, 253, 251, 251, 252, 252, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 252, 253, 253, 253, 253, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 253, 253, 253, 253, 253, 253, 103, 103, 92, 92, 124, 124, 241, 133, 133, 92, 253, 253, 114, 114, 125, 121, 121, 250, 250, 76, 76, 141, 141, 169, 169, 135, 136, 136, 126, 126, 121, 121, 127, 127, 147, 147, 155, 160, 250, 250, 253, 253, 249, 254, 254, 249, 249, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 253, 253, 253, 253, 253, 252, 254, 254, 254, 250, 250, 251, 251, 165, 165, 137, 137, 243, 243, 253, 251, 251, 250, 250, 253, 253, 251, 251, 248, 218, 218, 222, 222, 246, 252, 252, 254, 254, 253, 253, 254, 254, 252, 252, 253, 253, 253, 254, 253, 253, 238, 250, 250, 253, 253, 252, 252, 253, 253, 254, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 253, 253, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 253, 253, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 254, 254, 253, 253, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 253, 253, 252, 252, 248, 242, 242, 242, 242, 243, 243, 243, 243, 250, 251, 251, 254, 254, 253, 253, 253, 253, 253, 254, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 253, 253, 253, 253, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252};
const int outPin = 0;
int direction = 1;
int lastRow; // last index in the data array
const int frameMs = 1000/30;
const int mhz =  1; // adjust for clock speed
char sampleValue;

void setup()
{
  pinMode(outPin, OUTPUT); 
#ifdef DEBUG  
  mySerial.begin(4800);
#endif
  lastRow = -1 + sizeof(dataRows) / sizeof(byte);
}

void loop() {
  // get next value to output from flash memory
  sampleValue = pgm_read_byte_near(dataRows + rowIndex);
#ifdef DEBUG
  mySerial.print(sampleValue);
  mySerial.print(',');
  mySerial.print(rowIndex);
  mySerial.print('/');
  mySerial.println(lastRow);
#endif
  analogWrite(outPin, sampleValue); 

  // advance to the next position in the data array:
  rowIndex += direction;
  // if we're at the end of the array...
  if (rowIndex >= lastRow) {
    direction = -1;
    rowIndex = lastRow;
  } else if(rowIndex <= 0) {
    direction = 1;
    rowIndex = 0;
  }

  delay(frameMs);
}

