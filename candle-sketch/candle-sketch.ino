/*
  Sampled LED candle
*/
#define DEBUG 1
#include <avr/pgmspace.h>

#ifdef DEBUG
#include <SoftwareSerial.h>

const int rxPin = 3; // physical pin 2 on attiny852
const int txPin = 4; // physical pin 3
#endif

#ifdef DEBUG
SoftwareSerial mySerial(rxPin, txPin); // RX, TX
#endif

int rowIndex = 0;  // index into data rows
const PROGMEM  byte dataRows[] = {251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 230, 230, 230, 175, 175, 175, 141, 141, 213, 213, 213, 213, 251, 251, 251, 253, 253, 253, 253, 253, 250, 250, 250, 138, 138, 138, 115, 115, 110, 110, 110, 119, 119, 244, 244, 245, 245, 136, 136, 136, 118, 118, 118, 148, 148, 148, 199, 199, 231, 231, 231, 248, 248, 248, 251, 252, 252, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 251, 251, 247, 247, 247, 247, 175, 175, 175, 192, 192, 246, 246, 246, 250, 250, 250, 252, 252, 252, 252, 252, 250, 250, 250, 236, 236, 236, 201, 201, 201, 178, 178, 178, 135, 135, 115, 115, 115, 115, 115, 131, 131, 131, 225, 225, 225, 252, 252, 252, 253, 253, 253, 253, 253, 252, 252, 252, 252, 252, 252, 251, 251, 251, 238, 238, 243, 243, 243, 252, 252, 252, 252, 252, 252, 253, 253, 251, 251, 251, 251, 251, 251, 251, 249, 249, 249, 250, 250, 252, 252, 252, 254, 254, 254, 253, 253, 253, 253, 253, 253, 253, 253, 248, 248, 248, 248, 250, 250, 250, 251, 250, 250, 250, 250, 246, 246, 246, 209, 209, 209, 190, 190, 249, 249, 252, 252, 252, 253, 253, 253, 251, 251, 248, 248, 248, 249, 249, 249, 249, 252, 252, 252, 252, 252, 253, 252, 252, 252, 252, 250, 250, 252, 252, 252, 254, 254, 254, 254, 254, 236, 119, 131, 131, 131, 242, 242, 242, 253, 253, 253, 253, 247, 247, 247, 142, 142, 142, 114, 111, 111, 117, 117, 169, 244, 244, 252, 252, 252, 252, 252, 252, 251, 236, 234, 234, 234, 248, 248, 242, 242, 242, 232, 232, 232, 228, 228, 235, 235, 235, 244, 244, 244, 248, 248, 248, 247, 247, 222, 222, 222, 222, 182, 182, 182, 182, 182, 236, 236, 236, 253, 253, 253, 253, 253, 253, 250, 250, 234, 234, 234, 176, 176, 176, 128, 128, 128, 122, 122, 119, 119, 119, 119, 111, 111, 111, 108, 108, 107, 107, 107, 107, 107, 108, 108, 108, 110, 110, 110, 110, 110, 110, 115, 115, 115, 115, 115, 118, 118, 118, 137, 137, 219, 219, 219, 245, 245, 245, 245, 250, 250, 245, 245, 245, 226, 226, 226, 193, 193, 193, 224, 224, 224, 245, 245, 245, 245, 245, 199, 199, 199, 164, 164, 164, 164, 164, 158, 158, 158, 144, 144, 144, 134, 134, 134, 137, 137, 137, 143, 143, 155, 155, 155, 182, 182, 182, 182, 216, 216, 247, 247, 247, 253, 253, 253, 252, 252, 252, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 252, 228, 228, 228, 174, 174, 174, 141, 141, 141, 141, 128, 128, 123, 123, 123, 119, 119, 119, 119, 115, 115, 115, 112, 112, 109, 109, 109, 109, 109, 109, 109, 111, 111, 111, 117, 117, 117, 129, 129, 129, 191, 191, 191, 235, 235, 229, 229, 229, 187, 187, 187, 165, 165, 165, 174, 174, 174, 193, 193, 193, 200, 200, 200, 214, 214, 214, 227, 225, 225, 214, 214, 214, 209, 209, 209, 214, 214, 214, 250, 250, 252, 252, 252, 252, 252, 252, 245, 148, 148, 118, 118, 118, 113, 113, 113, 114, 116, 116, 116, 116, 119, 119, 125, 156, 156, 225, 225, 247, 247, 247, 247, 247, 203, 203, 203, 139, 124, 122, 122, 122, 124, 124, 124, 114, 114, 114, 143, 143, 143, 212, 212, 212, 238, 238, 238, 228, 228, 228, 157, 157, 157, 138, 138, 138, 123, 123, 123, 115, 115, 115, 114, 114, 114, 120, 120, 120, 125, 125, 125, 125, 140, 145, 145, 145, 131, 131, 125, 125, 125, 121, 121, 121, 122, 122, 122, 119, 119, 119, 115, 115, 115, 117, 117, 117, 122, 122, 122, 138, 138, 138, 248, 248, 250, 250, 250, 249, 249, 249, 248, 248, 230, 117, 117, 117, 113, 113, 113, 122, 122, 122, 209, 209, 209, 220, 220, 185, 185, 185, 116, 116, 116, 116, 114, 114, 114, 101, 99, 99, 99, 100, 100, 100, 100, 98, 98, 98, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 95, 95, 95, 95, 95, 95, 95, 95, 95, 99, 99, 99, 102, 102, 102, 99, 99, 99, 97, 97, 97, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 95, 95, 95, 95, 96, 96, 96, 107, 107, 114, 114, 114, 114, 104, 104, 104, 97, 95, 95, 95, 95, 97, 97, 97, 100, 100, 100, 106, 106, 107, 107, 107, 113, 113, 113, 115, 115, 115, 115, 115, 116, 116, 116, 110, 110, 110, 105, 105, 105, 105, 105, 105, 105, 105, 105, 107, 107, 107, 107, 107, 105, 105, 105, 104, 104, 104, 103, 103, 103, 99, 99, 99, 99, 99, 99, 100, 100, 100, 101, 101, 108, 124, 200, 200, 200, 200, 227, 227, 227, 162, 162, 149, 146};
const int outPin = 0;
int direction = 1;
int lastRow; // last index in the data array
const int frameMs = 1000/60;
const int mhz =  1; // adjust for clock speed
char sampleValue;

void setup()
{
  pinMode(outPin, OUTPUT); 
#ifdef DEBUG  
  mySerial.begin(4800);
#endif
  lastRow = -1 + sizeof(dataRows) / sizeof(byte);
}

void loop() {
  // get next value to output from flash memory
  sampleValue = pgm_read_byte_near(dataRows + rowIndex);
#ifdef DEBUG
  mySerial.print(sampleValue);
  mySerial.print(',');
  mySerial.print(rowIndex);
  mySerial.print('/');
  mySerial.println(lastRow);
#endif
  analogWrite(outPin, sampleValue); 

  // advance to the next position in the data array:
  rowIndex += direction;
  // if we're at the end of the array...
  if (rowIndex >= lastRow) {
    direction = -1;
    rowIndex = lastRow;
  } else if(rowIndex <= 0) {
    direction = 1;
    rowIndex = 0;
  }

  delay(frameMs);
}

